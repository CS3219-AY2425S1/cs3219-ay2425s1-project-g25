[
    {
        "title": "Reverse a String",
        "description": "Write a function that reverses a string. The input string is given as an array of characters `s`.\n\nYou must do this by modifying the input array **in-place** with O(1) extra memory.\n\n**Example 1:**\n\nInput: `s = [\"h\",\"e\",\"l\",\"l\",\"o\"]`\n\nOutput: `[\"o\",\"l\",\"l\", \"e\",\"h\"]`\n\n**Example 2:**\n\nInput: `s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]`\n\nOutput: `[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]`\n\n**Constraints:**\n\n- `1 <= s.length <= 105`\n- `s[i]` is a printable ASCII character.",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635641",
                "name": "Strings"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/reverse-string/"
    },
    {
        "title": "Linked List Cycle Detection",
        "description": "Implement a function to detect if a linked list contains a cycle.\n\n![Linked List Example](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635643",
                "name": "Data Structures"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/linked-list-cycle/"
    },
    {
        "title": "Roman to Integer",
        "description": "Given a Roman numeral, convert it to an integer.",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/roman-to-integer/"
    },
    {
        "title": "Add Binary",
        "description": "Given two binary strings `a` and `b`, return their sum as a binary string.",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635646",
                "name": "Bit Manipulation"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/add-binary/"
    },
    {
        "title": "Fibonacci Number",
        "description": "The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\n- `F(0) = 0`\n- `F(1) = 1`\n- `F(n) = F(n - 1) + F(n - 2)`, for `n > 1`.\n\nGiven `n`, calculate `F(n)`.",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635648",
                "name": "Recursion"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/fibonacci-number/"
    },
    {
        "title": "Implement Stack using Queues",
        "description": "Implement a last-in, first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635643",
                "name": "Data Structures"
            }
        ],
        "url": "https://leetcode.com/problems/implement-stack-using-queues/"
    },
    {
        "title": "Combine Two Tables",
        "description": "Given table `Person` with the following columns:\n\n1. `personId` (int)\n2. `lastName` (varchar)\n3. `firstName` (varchar)\n\n`personId` is the primary key.\n\nAnd table `Address` with the following columns:\n\n1. `addressId` (int)\n2. `personId` (int)\n3. `city` (varchar)\n4. `state` (varchar)\n\n`addressId` is the primary key.\n\nWrite a solution to report the `firstName`, `lastName`, `city`, and `state` of each person in the `Person` table. If the address of a `personId` is not present in the `Address` table, report `null` instead.\n\nReturn the result table in any order.",
        "difficulty": "Easy",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635651",
                "name": "Databases"
            }
        ],
        "url": "https://leetcode.com/problems/combine-two-tables/"
    },
    {
        "title": "Repeated DNA Sequences",
        "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, `\"ACGAATTCCG\"` is a DNA sequence. When studying DNA, it is useful to identify repeated sequences within the DNA.\n\nGiven a string `s` that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.",
        "difficulty": "Medium",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            },
            {
                "_id": "650efc0e062b5b45a6635646",
                "name": "Bit Manipulation"
            }
        ],
        "url": "https://leetcode.com/problems/repeated-dna-sequences/"
    },
    {
        "title": "Course Schedule",
        "description": "There are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.\n\nFor example, the pair `[0, 1]`, indicates that to take course 0 you have to first take course 1.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.",
        "difficulty": "Medium",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635643",
                "name": "Data Structures"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/course-schedule/"
    },
    {
        "title": "LRU Cache Design",
        "description": "Design and implement an **LRU (Least Recently Used)** cache.",
        "difficulty": "Medium",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635643",
                "name": "Data Structures"
            }
        ],
        "url": "https://leetcode.com/problems/lru-cache/"
    },
    {
        "title": "Longest Common Subsequence",
        "description": "Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\nA common subsequence of two strings is a subsequence that is common to both strings.",
        "difficulty": "Medium",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635641",
                "name": "Strings"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/longest-common-subsequence/"
    },
    {
        "title": "Rotate Image",
        "description": "You are given an `n x n` 2D matrix representing an image, rotate the image by 90 degrees (clockwise).",
        "difficulty": "Medium",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635647",
                "name": "Arrays"
            },
            {
                "_id": "650efc0e062b5b45a6635642",
                "name": "Algorithms"
            }
        ],
        "url": "https://leetcode.com/problems/rotate-image/"
    },
    {
        "title": "Airplane Seat Assignment Probability",
        "description": "`n` passengers board an airplane with exactly `n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\n- Take their own seat if it is still available, and\n- Pick other seats randomly when they find their seat occupied\n\nReturn the probability that the `n`th person gets their own seat.",
        "difficulty": "Medium",
        "categories": [
            {
                "_id": "650efc0e062b5b45a6635661",
                "name": "Brainteaser"
            }
        ],
        "url": "https://leetcode.com/problems/airplane-seat-assignment-probability/"
    }
]
